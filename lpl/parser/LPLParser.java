/* LPLParser.java */
/* Generated By:JavaCC: Do not edit this line. LPLParser.java */
  package lpl.parser;

  import lpl.ast.*;
  import java.util.List;
  import java.util.LinkedList;

  public class LPLParser implements LPLParserConstants {

  final public Program nt_Program() throws ParseException {FunDef mainDef, fd;
  List<FunDef> fds = new LinkedList<FunDef>();
    mainDef = nt_FunDef();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      fd = nt_FunDef();
fds.add(fd);
    }
    jj_consume_token(0);
{if ("" != null) return new Program(mainDef, fds);}
    throw new Error("Missing return statement in function");
}

  final public FunDef nt_FunDef() throws ParseException {Type type;
  Token mName;
  VarDecl lv;
  List<Formal> fs;
  List<VarDecl> lvs = new LinkedList<VarDecl>();
  Stm s;
  List<Stm> ss = new LinkedList<Stm>();
    jj_consume_token(DEF);
    type = nt_Type();
    mName = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    fs = nt_FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case UNIT:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      lv = nt_VarDecl();
lvs.add(lv);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case LBRACE:
      case ISNULL:
      case NEW:
      case IF:
      case WHILE:
      case OUTPUT:
      case OUTCHAR:
      case RETURN:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      s = nt_Statement();
ss.add(s);
    }
    jj_consume_token(RBRACE);
{if ("" != null) return new FunDef(type, mName.image, fs, lvs, ss);}
    throw new Error("Missing return statement in function");
}

  final public List<Formal> nt_FormalList() throws ParseException {Formal f;
  List<Formal> fs = new LinkedList<Formal>();
  Type type;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:
    case UNIT:{
      type = nt_Type();
      t = jj_consume_token(ID);
f = new Formal(type, t.image); fs.add(f);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        f = nt_FormalRest();
fs.add(f);
      }
{if ("" != null) return fs;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;

{if ("" != null) return fs;}
    }
    throw new Error("Missing return statement in function");
}

  final public Formal nt_FormalRest() throws ParseException {Token t;
  Type type;
    jj_consume_token(COMMA);
    type = nt_Type();
    t = jj_consume_token(ID);
{if ("" != null) return new Formal(type, t.image);}
    throw new Error("Missing return statement in function");
}

  final public Type nt_Type() throws ParseException {Token t;
  Type type;
    type = nt_SimpleType();
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(LSQBR);
      jj_consume_token(RSQBR);
type = new TypeArray(type);
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final public Type nt_SimpleType() throws ParseException {Token t;
  Type type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      t = jj_consume_token(INT);
type = new TypeInt(); {if ("" != null) return type;}
      break;
      }
    case BOOLEAN:{
      t = jj_consume_token(BOOLEAN);
type = new TypeBoolean(); {if ("" != null) return type;}
      break;
      }
    case UNIT:{
      t = jj_consume_token(UNIT);
type = new TypeUnit(); {if ("" != null) return type;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public VarDecl nt_VarDecl() throws ParseException {Type vtype;
  Token t;
    vtype = nt_Type();
    t = jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new VarDecl(vtype, t.image);}
    throw new Error("Missing return statement in function");
}

  final public Stm nt_Statement() throws ParseException {Stm s, st, sf;
  List<Stm> ss = new LinkedList<Stm>();
  List<Exp> es = new LinkedList<Exp>();
  Exp e, e1, e2;
  PrimaryExp pe;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case LPAREN:
        case TRUE:
        case FALSE:
        case NOT:
        case LBRACE:
        case ISNULL:
        case NEW:
        case IF:
        case WHILE:
        case OUTPUT:
        case OUTCHAR:
        case RETURN:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        s = nt_Statement();
ss.add(s);
      }
      jj_consume_token(RBRACE);
{if ("" != null) return new StmBlock(ss);}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_2(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        e = nt_Exp();
        jj_consume_token(SEMICOLON);
{if ("" != null) return new StmAssign(t.image, e);}
      } else if (jj_2_3(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(LPAREN);
        es = nt_ExpList();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
{if ("" != null) return new StmCall(t.image, es);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case LPAREN:
        case TRUE:
        case FALSE:
        case NOT:
        case ISNULL:
        case NEW:
        case ID:{
          pe = nt_PrimaryExp();
          jj_consume_token(LSQBR);
          e1 = nt_Exp();
          jj_consume_token(RSQBR);
          t = jj_consume_token(ASSIGN);
          e2 = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmArrayAssign(pe, e1, e2);}
          break;
          }
        case IF:{
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          e = nt_Exp();
          jj_consume_token(RPAREN);
          st = nt_Statement();
          jj_consume_token(ELSE);
          sf = nt_Statement();
{if ("" != null) return new StmIf(e, st, sf);}
          break;
          }
        case WHILE:{
          jj_consume_token(WHILE);
          jj_consume_token(LPAREN);
          e = nt_Exp();
          jj_consume_token(RPAREN);
          s = nt_Statement();
{if ("" != null) return new StmWhile(e, s);}
          break;
          }
        case OUTPUT:{
          jj_consume_token(OUTPUT);
          e = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmOutput(e);}
          break;
          }
        case OUTCHAR:{
          jj_consume_token(OUTCHAR);
          e = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmOutchar(e);}
          break;
          }
        case RETURN:{
          jj_consume_token(RETURN);
          e = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmReturn(e);}
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  final public Exp nt_Exp() throws ParseException {Token t;
  Exp e;
  PrimaryExp e1, e2;
  Op op;
  List<Exp> es;
    if (jj_2_4(2)) {
      t = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      es = nt_ExpList();
      jj_consume_token(RPAREN);
{if ("" != null) return new ExpCall(t.image, es);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ISNULL:
      case NEW:
      case ID:{
        e1 = nt_PrimaryExp();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQBR:{
          jj_consume_token(LSQBR);
          e = nt_Exp();
          jj_consume_token(RSQBR);
{if ("" != null) return new ExpArrayLookup(e1, e);}
          break;
          }
        case DOT:{
          jj_consume_token(DOT);
          jj_consume_token(LENGTH);
{if ("" != null) return new ExpArrayLength(e1);}
          break;
          }
        case AND:
        case OR:
        case LESSTHAN:
        case EQUALS:
        case DIV:
        case PLUS:
        case MINUS:
        case TIMES:{
          op = nt_Op();
          e2 = nt_PrimaryExp();
{if ("" != null) return new ExpOp(e1, op, e2);}
          break;
          }
        default:
          jj_la1[9] = jj_gen;

{if ("" != null) return new ExpPrimaryExp(e1);}
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public Exp nt_Exp_alt() throws ParseException {Token t;
  PrimaryExp pe;
  List<Exp> es;
    if (jj_2_5(2)) {
      t = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      es = nt_ExpList();
      jj_consume_token(RPAREN);
{if ("" != null) return new ExpCall(t.image, es);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ISNULL:
      case NEW:
      case ID:{
        pe = nt_PrimaryExp();
{if ("" != null) return nt_ExpFactor(pe);}
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public Exp nt_ExpFactor(PrimaryExp prefix) throws ParseException {Exp e;
  PrimaryExp pe;
  Op op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSQBR:{
      jj_consume_token(LSQBR);
      e = nt_Exp();
      jj_consume_token(RSQBR);
{if ("" != null) return new ExpArrayLookup(prefix, e);}
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      jj_consume_token(LENGTH);
{if ("" != null) return new ExpArrayLength(prefix);}
      break;
      }
    case AND:
    case OR:
    case LESSTHAN:
    case EQUALS:
    case DIV:
    case PLUS:
    case MINUS:
    case TIMES:{
      op = nt_Op();
      pe = nt_PrimaryExp();
{if ("" != null) return new ExpOp(prefix, op, pe);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;

{if ("" != null) return new ExpPrimaryExp(prefix);}
    }
    throw new Error("Missing return statement in function");
}

  final public Op nt_Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
{if ("" != null) return Op.AND;}
      break;
      }
    case OR:{
      jj_consume_token(OR);
{if ("" != null) return Op.OR;}
      break;
      }
    case LESSTHAN:{
      jj_consume_token(LESSTHAN);
{if ("" != null) return Op.LESSTHAN;}
      break;
      }
    case EQUALS:{
      jj_consume_token(EQUALS);
{if ("" != null) return Op.EQUALS;}
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
{if ("" != null) return Op.DIV;}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
{if ("" != null) return Op.PLUS;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
{if ("" != null) return Op.MINUS;}
      break;
      }
    case TIMES:{
      jj_consume_token(TIMES);
{if ("" != null) return Op.TIMES;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public PrimaryExp nt_PrimaryExp() throws ParseException {Token t;
  Exp e;
  PrimaryExp pe;
  List<Exp> es;
  Type type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new PrimaryExpInteger(Integer.parseInt(t.image));}
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
{if ("" != null) return new PrimaryExpTrue();}
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
{if ("" != null) return new PrimaryExpFalse();}
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
{if ("" != null) return new PrimaryExpVar(t.image);}
      break;
      }
    case NOT:{
      t = jj_consume_token(NOT);
      pe = nt_PrimaryExp();
{if ("" != null) return new PrimaryExpNot(pe);}
      break;
      }
    case ISNULL:{
      t = jj_consume_token(ISNULL);
      pe = nt_PrimaryExp();
{if ("" != null) return new PrimaryExpIsnull(pe);}
      break;
      }
    case NEW:{
      t = jj_consume_token(NEW);
      type = nt_Type();
      jj_consume_token(LSQBR);
      e = nt_Exp();
      jj_consume_token(RSQBR);
{if ("" != null) return new PrimaryExpNewArray(type, e);}
      break;
      }
    case LPAREN:{
      t = jj_consume_token(LPAREN);
      e = nt_Exp();
      jj_consume_token(RPAREN);
{if ("" != null) return new PrimaryExpExp(e);}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public List<Exp> nt_ExpList() throws ParseException {Exp e;
  List<Exp> es = new LinkedList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case LPAREN:
    case TRUE:
    case FALSE:
    case NOT:
    case ISNULL:
    case NEW:
    case ID:{
      e = nt_Exp();
es.add(e);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        e = nt_ExpRest();
es.add(e);
      }
{if ("" != null) return es;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;

{if ("" != null) return es;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp nt_ExpRest() throws ParseException {Exp e;
    jj_consume_token(COMMA);
    e = nt_Exp();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(LSQBR)) return true;
    if (jj_scan_token(RSQBR)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x800,0x7000,0x138300,0x0,0x7000,0x7000,0x138300,0x100000,0x38300,0xff040000,0x38300,0x38300,0xff040000,0xff000000,0x38300,0x0,0x38300,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0xfd2,0x8,0x0,0x0,0xfd2,0x0,0xfd2,0x1,0x812,0x812,0x1,0x0,0x812,0x8,0x812,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LPLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LPLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LPLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LPLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LPLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LPLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LPLParser(LPLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LPLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[44];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 44; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

    // JavaCC will generate the body of this class
  }
